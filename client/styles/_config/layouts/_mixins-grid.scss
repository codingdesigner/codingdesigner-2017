////
/// @group Layout
////


/// Grid Container
/// @param {list | null} $col-widths [50% 50%] - an scss list of column widths, or null if you plan to use the `grid-item()` mixin on grid items
/// @param {string | null} $wrap [wrap] - accepts values for flex-wrap
/// @param {string | null} $justify-content [null] - accepts values for justify-content
/// @param {string | null} $align-items [null] - accepts values for align-items
/// @param {string | null} $column-selector [.grid--item] - the css selector for your grid items
/// @param {number | null} $gutter [null] - the width of your grid item gutters
/// @param {padding | margin} $gutter-type [padding] - apply gutter calculations to `padding` or `margin`
/// @param {bool} $strict-cols [false] - set `max-width` on cols equal to `flex-basis`
@mixin grid-container($col-widths: 50% 50%, $wrap: wrap, $justify-content: null, $align-items: null, $column-selector: '.grid--item', $gutter: null, $gutter-type: padding, $strict-cols: false) {
  $cols: length($col-widths);
  $gutter-adjust: if($gutter and $gutter != 0, $gutter - ($gutter / $cols), null);
  display: flex;

  @if ($wrap) {
    flex-wrap: $wrap;
  }

  @if ($justify-content) {
    justify-content: $justify-content;
  }

  @if ($align-items) {
    align-items: $align-items;
  }

  @if ($col-widths != null) {
    > #{$column-selector} {

      @if ($gutter) {
        $gutter-half: $gutter * 0.5;
        #{$gutter-type}-right: $gutter-half;
        #{$gutter-type}-left: $gutter-half;

        &:first-child {
          #{$gutter-type}-right: $gutter-half;
          #{$gutter-type}-left: 0;
        }

        &:last-child {
          #{$gutter-type}-right: 0;
          #{$gutter-type}-left: $gutter-half;
        }
      }

      @for $i from 1 through $cols {
        &:nth-child(#{$cols}n + #{$i}) {
          @if ($gutter-type == 'margin' and ($gutter-adjust and nth($col-widths, $i)) != 100%) {
            flex-basis: calc(#{nth($col-widths, $i)} - #{$gutter-adjust});
            @if ($strict-cols) {
              max-width: calc(#{nth($col-widths, $i)} - #{$gutter-adjust});
            }
          }

          @else {
            flex-basis: nth($col-widths, $i);
            @if ($strict-cols) {
              max-width: nth($col-widths, $i);
            }
          }

          @if ($gutter and nth($col-widths, $i) == 100%) {
            #{$gutter-type}-right: 0;
            #{$gutter-type}-left: 0;
          }
        }
      }
    }
  }

  @content;
}


/// Grid Item
/// * For precise control of grid items
/// * Most grids can be achieved more simply by applying `grid-container()` with column width arguments
/// * only apply this mixin if your applied `grid-container($col-widths: null)` to your grid container
/// @param {number} $col-width [50%] - the width of this column
/// @param {number | list | null} $gutter - the width of your grid item gutters, if using a list, it should be a two item list for left and right gutters
/// @param {padding | margin} $gutter-type [padding] - apply gutter calculations to `padding` or `margin`
/// @param {string | null} $flex-grow [null] - accepts values for flex-grow
@mixin grid-item($col-width: 50%, $gutter: null, $gutter-type: padding, $flex-grow: null) {
  @if ($gutter) {
    @if (type_of($gutter) == number or $gutter == 0) {
      #{$gutter-type}-right: $gutter;
      #{$gutter-type}-left: $gutter;

      @if ($gutter != 0) {
        flex-basis: calc(#{$col-width} - #{$gutter * 2});
      }

      @else {
        flex-basis: $col-width;
      }
    }

    @else if(type_of($gutter) == list) {
      flex-basis: calc(#{$col-width} - #{fix-calc-zeros(nth($gutter, 1))} - #{fix-calc-zeros(nth($gutter, 2))});
      #{$gutter-type}-right: nth($gutter, 2);
      #{$gutter-type}-left: nth($gutter, 1);
    }
  }

  @else {
    flex-basis: $col-width;
  }

  @if($flex-grow) {
    flex-grow: $flex-grow;
  }

  @content;
}
