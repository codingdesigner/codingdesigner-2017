{
  "posts": [
    {
      "id": "balancing",
      "headline": "Balancing Ideal Sass and Ideal CSS",
      "excerpt": "<p>Sass makes CSS fun again, right? Well yeah, but that also makes it easy to forget that we’re still writing CSS. We can get caught up in all the new tools and tricks that Sass lets us do so easily that we lose sight of some CSS that might not be as awesome as we think it is.</p>",
      "full": "Sass makes CSS fun again, right? Well yeah, but that also makes it easy to forget that we\u2019re still writing CSS. We can get caught up in all the new tools and tricks that Sass lets us do so easily that we lose sight of some CSS that might not be as awesome as we think it is. Last night at the [Philadelphia Sass Meetup](http:\/\/www.meetup.com\/Philadelphia-SASS-Meetup-Group\/) I set out to talk about the finer points of using mixins and extendable selectors, and ended up exploring how we can find the balance between a great Sass codebase and close-to-ideal compiled CSS.\r\n\r\nBalancing Ideal Sass and Ideal CSS -\u00A0Buttons\r\n--------------------------------------------\r\n\r\n1.  Let\u2019s just style a button. - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131724)\r\n2.  Create a mixin. DRY Sass, but bloated CSS \\- [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131748)\r\n3.  Convert to an extended class. DRY Sass and small CSS \\- [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131756)\r\n4.  Convert that extended class to a silent extendable. Even better! - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131765)\r\n5.  Maybe we need an alternate version of the button? Let\u2019s try some manual overrides. Good CSS, but we could have DRYer Sass - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131774)\r\n6.  We\u2019ll try creating a new silent extendable that calls our mixin with a new argument. Better Sass but now our CSS is starting to bloat. - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131792)\r\n7.  So now we\u2019ll split our mixin into a \u2018base\u2019 mixin for the styles that are common to all buttons, and a \u2018colors\u2019 mixin to handle our alternate colors. We\u2019ll create a %button extendable by calling both mixins, and a %button-cta extendable that extends %button and calls the button-colors mixin for its overrides. Clean Sass and clean CSS! [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131805)\r\n8.  What about RWD? Well it gets trickier. Extendables need to be scoped to their media query, so we need to redefine our extendables within a media query. The CSS is pretty clean but now the Sass is becoming a little hard to work with. - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131833)\r\n9.  Instead of worrying about scoping those media queries we\u2019ll call the mixins within the selector nest. This creates more css than we need, but the Sass is much easier to work with. - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131901)\r\n\r\nDon\u2019t extend native\u00A0elements\r\n----------------------------\r\n\r\n1.  Extending a native element once seems ok. - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131927)\r\n2.  But if we keep going we see a lot of (probably) unintended comma-separated selectors start to pile up. In a real project this gets pretty obsene. - [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131934)\r\n3.  So instead let\u2019s define some silent extendables and then use them to define our native element styles as well as any extensions to them. Managable Sass and clean CSS! \\- [Sassmeister\u00A0Example](http:\/\/sassmeister.com\/gist\/6131957)",
      "date": "2013-08-1"
    },
    {
      "id": "fixing",
      "headline": "Fixing H&FJ Font Previews",
      "excerpt": "<p>I'm considering Hoefler &amp; Frere-Jones webfonts for a new project. The service looks great but I haven't signed up yet. This may be different once I've paid for something, but for now their web preview kind of sucks. (sorry H&amp;FJ) I want to test my own text before making such a big commitment but they only show their own promo text.</p>",
      "image": {
        "src": "fixing-hfj",
        "alt": "Fixing H&FJ Font Previews"
      },
      "full": "I'm considering [Hoefler & Frere-Jones webfonts](http:\/\/www.typography.com\/) for a new project. The service looks great but I haven't signed up yet. This may be different once I've paid for something, but for now their [web preview](http:\/\/www.typography.com\/fonts\/knockout\/webfonts\/) kind of sucks. (sorry H&FJ) I want to test my own text before making such a big commitment but they only show their own promo text. To fix that I created a little bookmarklet that adds the ['contenteditable'](http:\/\/html5doctor.com\/the-contenteditable-attribute\/) attribute to all the preview spans. Now you can click any of those lines and type whatever you like. It's been helpful to me. Enjoy.\r\n\r\nDrag this to your bookmarks: [H&FJ Webfont Preview](https:\/\/codepen.io\/codingdesigner\/pen\/XVRNpX?editors=1000#) Use on pages like this: [H&FJ Knockout](http:\/\/www.typography.com\/fonts\/knockout\/webfonts\/)\r\n\r\n### Update",
      "embeds": [
        {
          "type_tweet": true,
          "content": "355074391916285952"
        }
      ],
      "date": "2013-07-10"
    },
    {
      "id": "responsive",
      "headline": "Responsive Web Design and Drupal",
      "excerpt": "<p>We love Responsive Web Design, and we love Drupal. But do they love each other? After working on a number of RWD and Drupal projects this year, I’m happy to report that they get along just fine. Though “Love” might be stretching it a bit.</p>",
      "full": "We love [Responsive Web Design](http:\/\/alistapart.com\/article\/responsive-web-design), and we love Drupal. But do they love each other? After working on a number of RWD and Drupal projects this year, I\u2019m happy to report that they get along just fine. Though \u201CLove\u201D might be stretching it a\u00A0bit.\r\n\r\nCan Drupal and RWD be\u00A0Pals?\r\n---------------------------\r\n\r\nDrupal is a great platform for managing content and for building everything from simple blogs to very complex applications. By connecting Drupal\u2019s building blocks, you can build just about any functionality you need. That\u2019s amazing, especially if you\u2019ve ever struggled to build any aspect of that on your own. My Drupal a-ha moment came when I realized that I\u2019d never need to write a user log-in on my own again. Smarter people than me were on the\u00A0case.\r\n\r\nBut that speaks to two key aspects of Drupal that aren\u2019t directly related to RWD. Drupal is primarily a back-end tool that excels when the building blocks are abstracted to be applicable to as many use cases as possible. Defining views and content types rightly doesn\u2019t prescribe any layout or visual design, leaving those tasks to your creativity in the theming\u00A0layer.\r\n\r\nThe best Drupal themes are also the ones that are the most general, allowing you to add all the custom details yourself. Good design is in the details, and the details are always custom. A good starter theme gives you the tools you need to have total control over those details and then gets out of your way. Themes that provide a full visual design must have their place, but I\u2019ve never had a client that wanted to look like everyone else who installed the same theme. When a starter theme gets out of your way, you get something pretty fantastic: a back end system that provides the data and markup you need and a blank canvas where you can write whatever CSS and JavaScript you want to make something unique and\u00A0delightful.\r\n\r\nResponsive Web Design, just like any other flavor of design, is all about custom solutions. The difference is that we have the opportunity to change and refine the design around different browser characteristics, like the browser width. It\u2019s natural that a designer would want a system to help with all this added complexity, but in most aspects, Drupal doesn\u2019t provide such a system. But then again, it doesn\u2019t provide a system for logo design either. It\u2019s just not the right tool for that particular\u00A0task.\r\n\r\nPersonally, I prefer Drupal as a blank canvas. With tools like [Sass](http:\/\/sass-lang.com\/) and the [whole](http:\/\/breakpoint-sass.com\/) [wide](http:\/\/susy.oddbird.net\/) [world](http:\/\/css-tricks.com\/) of css techniques, I think we have some pretty great options\u00A0already.",
      "date": "2013-02-12"
    },
    {
      "id": "breakpoint",
      "headline": "Breakpoint 1.0",
      "excerpt": "<p>About a month ago I was working on a responsive site, and trying to do it right. So instead of setting break points to match device dimensions (for phone, tablet, and desktop) I would set break points when my content and design needed them. Taking this kind of control over your responsive design means two things:</p>",
      "image": {
        "src": "Breakpoint-Title-Card",
        "alt": "Breakpoint"
      },
      "full": "Don\u2019t feel like reading? [Go get it\u00A0now](https:\/\/github.com\/canarymason\/breakpoint)\r\n\r\n* * *\r\n\r\nAbout a month ago I was working on a responsive site, and trying to do it right. So instead of setting break points to match [device dimensions](http:\/\/bradfrostweb.com\/blog\/notes\/this-is-the-web\/) (for phone, tablet, and desktop) I would set break points when my content and design needed them. Taking this kind of control over your responsive design means two\u00A0things:\r\n\r\n1.  You probably have a LOT more media\u00A0queries\r\n2.  And you lose track of why you used each\u00A0one.\r\n\r\nI needed a system to manage media\u00A0queries.\r\n------------------------------------------\r\n\r\nAs anyone who knows me knows, I\u2019m a huge [Sass nerd](http:\/\/thesassway.com\/intermediate\/responsive-web-design-in-sass-using-media-queries-in-sass-32). Like, [huge](http:\/\/thesassway.com\/articles\/the-sass-jerk). So of course I was already trying to manage my breakpoints with my own system of variables and a super-cool mixin. Well that mixin was quickly growing unweildly, so I knew it was time to make something\u00A0better.\r\n\r\nI started with a few\u00A0assumptions\r\n--------------------------------\r\n\r\n1.  Most queries test the min-width\u00A0feature.\r\n2.  Variables are a good way to manage queries in a growing\u00A0project.\r\n3.  It\u2019s nice to have a short easy syntax, that would still allow for complex queries when\u00A0needed.\r\n\r\nSo I started with the syntax and worked it out from there. Since I wanted something simple I settled on using a mixin called \u201Cbreakpoint\u201D. That\u2019s easy to remember. And since I\u2019m making some assumptions on common use cases I decided to pass that mixin an argument that could contain just a simple numerical value. So, the simplest and most common use of breakpoint goes like\u00A0this:\r\n\r\n### Simple\u00A0use\r\n\r\n```SCSS\r\n$breakpoint-medium-width: 500px;\r\n.foo {\r\n  @include breakpoint($breakpoint-medium-width) {...}\r\n}\r\n```\r\n\r\nWhich compiles\u00A0to:\r\n\r\n```CSS\r\n@media (min-width:\u00A0500px) {.foo {...}}\r\n```\r\n\r\n\r\n### min\/max\u00A0use\r\n\r\nI expanded the syntax to accept numerical pairs, signifying a min\/max relationship. The default feature is\u00A0min\/max-width.\r\n\r\n```SCSS\r\n$breakpoint-medium-not-wide:\u00A0500px\u00A0700px;\r\n.baz {\r\n\u00A0\u00A0@include breakpoint($breakpoint-medium-not-wide) {...}\r\n}\r\n```\r\n\r\nWhich compiles\u00A0to:\r\n\r\n```CSS\r\n@media (min-width:\u00A0500px) and (max-width:\u00A0700px) {.baz {...}}\r\n```\r\n\r\n### Feature \/ value\u00A0pairs\r\n\r\nI can\u2019t limit this to just one kind of feature test, so if you pass in a feature name and a value it knows what to\u00A0do.\r\n\r\n```SCSS\r\n$breakpoint-not-too-wide: max-width\u00A0700px;\r\n.wtf {\r\n\u00A0\u00A0@include breakpoint($breakpoint-not-too-wide) {...}\r\n}\r\n```\r\n\r\nWhich compiles\u00A0to:\r\n\r\n```CSS\r\n@media (max-width:\u00A0700px) {.wtf {...}}\r\n```\r\n\r\n### Stack \u2018em\u00A0up\r\n\r\nSince I want to be able to create as complex a query as needed you can stack these up in a comma-separated list. You can even use one-sided tests like\u00A0monochrome\r\n\r\n```SCSS\r\n$breakpoint-wide-portrait-mono: max-width\u00A0700px, orientation\u00A0portrait, monochrome;\r\n.zztop {\r\n\u00A0\u00A0@include breakpoint($breakpoint-wide-portrait-mono) {...}\r\n}\r\n```\r\n\r\nWhich compiles\u00A0to:\r\n\r\n```CSS\r\n@media (max-width:\u00A0700px) and (orientation:\u00A0portrait) and (monochrome) {.zztop {...}}\r\n```\r\n\r\nI use this a lot. All over the place. Giving my breakpoint variable names that make sense keeps me organized, and the syntax makes me faster.\u00A0Yay!\r\n\r\nCollaborate, refine, add\u00A0features\r\n---------------------------------\r\n\r\nI told my friends about this, and one in particular practically pounced on it. My good buddy [@snugug](https:\/\/twitter.csnugug) had been working on [another solution](https:\/\/github.com\/Snugug\/respond-to) to managing media queries and decided that Breakpoint would be a good engine for his syntax as well as the default one. And once he gets his claws in something he doesn\u2019t let go. And that\u2019s awesome, because now I can very happily say that Breakpoint is ready for prime\u00A0time.\r\n\r\nYou want configuration options? You got\u00A0\u2018em.\r\n\r\nYou want to use ems instead of pixels? ([You should.](http:\/\/blog.cloudfour.com\/the-ems-have-it-proportional-media-queries-ftw\/)) Now Breakpoint can do the calculation for\u00A0you.\r\n\r\nYou want to use `device-pixel-ratio`? ([You shouldn\u2019t.](http:\/\/www.w3.org\/blog\/CSS\/2014\/unprefix-webkit-device-pixel-ratio\/)) Breakpoint will convert those to `resolution` for\u00A0you.\r\n\r\nSam added these features as well as a ton of refinements to the code base. Everyone, thank Sam, OK? He\u2019s pretty\u00A0rad.\r\n\r\nAdd a break point at the point where it\u00A0breaks.\r\n-----------------------------------------------\r\n\r\n[Go get it\u00A0now!](https:\/\/github.com\/canarymason\/breakpoint)",
      "date": "2012-06-26"
    }
  ]
}


